import json
import os
from multiprocessing.pool import ThreadPool

nums = {
    'Общее_количество_этажей': 000000,
    'Общее_количество_квартир': 0000000,
    'Количество_кирпичных_домов': 0000,
    'Количество_железобетонных_домов': 0000,
    'Количество_стеклянных_домов': 0000,
    'Общая_площадь_всех_квартир': 0000000,
    'Общее_количество_жителей': 0000000,
    'Процент_наличия_лифта': 00.00,
    'Процент_наличия_охраны': 00.00,
    'Процент_наличия_парковки': 00.00,
    'Процент_наличия_спортивных_залов': 00.00,
    'Общий_расход_энергии_на_все_дома': 000000000
}


def get_list_files(directory: str) -> list:
    list_files = os.listdir(directory)
    return [directory + os.sep + file for file in list_files]


def read_file(file_path: str) -> list[dict]:
    with open(file_path, encoding='utf-8') as file:
        file_content = json.load(file)
    return file_content


def calc_stat_by_file(filename: str) -> dict:
    nums_file = {
        'Количество_домов': 000,
        'Общее_количество_этажей': 000000,
        'Общее_количество_квартир': 0000000,
        'Количество_кирпичных_домов': 0000,
        'Количество_железобетонных_домов': 0000,
        'Количество_стеклянных_домов': 0000,
        'Общая_площадь_всех_квартир': 0000000,
        'Общее_количество_жителей': 0000000,
        'Количество_лифтов': 00,
        'Количество_охраны': 00,
        'Количество_парковки': 00,
        'Количество_спортивных_залов': 00,
        'Общий_расход_энергии_на_все_дома': 000000000
    }

    file_content = read_file(filename)
    nums_file['Количество_домов'] = len(file_content)

    for item in file_content:
        nums_file['Общее_количество_этажей'] += item['Количество_этажей']
        nums_file['Общее_количество_квартир'] += item['Количество_квартир']
        nums_file['Количество_кирпичных_домов'] += 1 if item['Тип_материала'] == 'кирпич' else 0
        nums_file['Количество_железобетонных_домов'] += 1 if item['Тип_материала'] == 'железобетон' else 0
        nums_file['Количество_стеклянных_домов'] += 1 if item['Тип_материала'] == 'стекло' else 0
        nums_file['Общая_площадь_всех_квартир'] += item['Площадь_квартиры'] * item['Количество_квартир']
        nums_file['Общее_количество_жителей'] += item['Количество_жителей']
        nums_file['Количество_лифтов'] += 1 if item['Наличие_лифта'] else 0
        nums_file['Количество_охраны'] += 1 if item['Наличие_охраны'] else 0
        nums_file['Количество_парковки'] += 1 if item['Наличие_парковки'] else 0
        nums_file['Количество_спортивных_залов'] += 1 if item['Наличие_спортивного_зала'] else 0
        nums_file['Общий_расход_энергии_на_все_дома'] += item['Расход_энергии_на_дом']

    return nums_file


def calc_stat(directory: str):
    files = get_list_files(directory)
    house_amount = 0

    with ThreadPool(4) as pool:
        for data in pool.imap(calc_stat_by_file, files, chunksize=4):
            house_amount += data['Количество_домов']
            nums['Общее_количество_этажей'] += data['Общее_количество_этажей']
            nums['Общее_количество_квартир'] += data['Общее_количество_квартир']
            nums['Количество_кирпичных_домов'] += data['Количество_кирпичных_домов']
            nums['Количество_железобетонных_домов'] += data['Количество_железобетонных_домов']
            nums['Количество_стеклянных_домов'] += data['Количество_стеклянных_домов']
            nums['Общая_площадь_всех_квартир'] += data['Общая_площадь_всех_квартир']
            nums['Общее_количество_жителей'] += data['Общее_количество_жителей']
            nums['Процент_наличия_лифта'] += data['Количество_лифтов']
            nums['Процент_наличия_охраны'] += data['Количество_охраны']
            nums['Процент_наличия_парковки'] += data['Количество_парковки']
            nums['Процент_наличия_спортивных_залов'] += data['Количество_спортивных_залов']
            nums['Общий_расход_энергии_на_все_дома'] += data['Общий_расход_энергии_на_все_дома']

    pool.join()

    nums['Процент_наличия_лифта'] = round(nums['Процент_наличия_лифта'] / house_amount * 100, 2)
    nums['Процент_наличия_охраны'] = round(nums['Процент_наличия_охраны']/ house_amount * 100, 2)
    nums['Процент_наличия_парковки'] = round(nums['Процент_наличия_парковки'] / house_amount * 100, 2)
    nums['Процент_наличия_спортивных_залов'] = round(nums['Процент_наличия_спортивных_залов'] / house_amount * 100, 2)


def main():
    calc_stat('.\\files3')
    print(nums)


if __name__ == '__main__':
    main()
