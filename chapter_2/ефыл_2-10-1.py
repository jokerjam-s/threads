import string
from concurrent.futures import ThreadPoolExecutor

messages = [
    "Привет, коллеги! Кто-нибудь может объяснить разницу между асинхронным и многопоточным программированием в Python?",
    "Асинхронное программирование позволяет обрабатывать несколько задач без блокировки основного потока.",
    "Многопоточное программирование также обеспечивает параллельное выполнение, но с использованием потоков вместо асинхронных задач.",
    "Обратите внимание, что GIL (глобальная блокировка интерпретатора) ограничивает параллельность в многопоточных программах.",
    "Для CPU-интенсивных задач часто используется многопроцессорное программирование.",
    "Многопроцессорное программирование позволяет использовать несколько процессов для параллельного выполнения.",
    "Для асинхронного программирования часто используют asyncio библиотеку в Python.",
    "Асинхронные функции обозначаются ключевым словом 'async def'.",
    "Использование await позволяет ожидать завершения асинхронных операций без блокировки.",
    "В многопоточном программировании потоки создаются с помощью библиотеки threading.",
    "Многопоточные задачи могут иметь общий доступ к данным, поэтому требуется синхронизация с помощью Lock или других механизмов.",
    "Многопоточное программирование подходит для I/O-интенсивных задач.",
    "Для многопроцессорного программирования можно использовать библиотеку multiprocessing.",
    "Каждый процесс имеет свое собственное пространство памяти, что обеспечивает изоляцию данных.",
    "Многопроцессорное программирование подходит для CPU-интенсивных вычислений.",
    "Асинхронное программирование часто используется в веб-разработке для обработки большого числа запросов.",
    "Многопоточное программирование полезно при работе с параллельными задачами, например, при скачивании файлов.",
    "Многопроцессорное программирование может быть эффективным при обработке данных в многозадачной среде.",
    "Каждый из этих подходов имеет свои преимущества и ограничения, и выбор зависит от конкретных требований проекта.",
    "Важно правильно выбирать между асинхронностью, многопоточностью и многопроцессорностью в зависимости от задачи.",
    "Продолжая обсуждение, асинхронное программирование особенно полезно при работе с сетевыми операциями, такими как запросы к API.",
    "Модуль concurrent.futures предоставляет ThreadPoolExecutor для многопоточного выполнения функций.",
    "ThreadPoolExecutor управляет пулом потоков, что упрощает многопоточное программирование.",
    "Когда речь идет о параллельной обработке данных, многопроцессорное программирование с использованием Pool из multiprocessing может быть хорошим выбором.",
    "Важно знать, как избегать гонок данных при работе с потоками или процессами.",
    "Использование мьютексов и других механизмов синхронизации помогает избежать проблем.",
    "Асинхронные задачи могут быть организованы в цепочки с использованием ключевого слова 'await'.",
    "Однако следует быть осторожным, чтобы избежать блокировки цепочки выполнения из-за долгих операций.",
    "Многопоточные программы могут столкнуться с проблемой 'гонки за ресурсы', если не управлять доступом к общим данным.",
    "Многопроцессорное программирование имеет некоторые накладные расходы на создание процессов, поэтому оно не всегда подходит для небольших задач.",
    "Однако оно отлично масштабируется на многоядерных системах.",
    "В Python есть библиотеки, такие как asyncio и threading, которые облегчают асинхронное и многопоточное программирование соответственно.",
    "Когда дело касается многопроцессорного программирования, модуль multiprocessing предоставляет мощные инструменты.",
    "Помните, что GIL может ограничивать параллельное выполнение в многопоточных программах Python.",
    "Для достижения максимальной производительности многопоточных приложений следует использовать несколько процессов, а не потоков.",
    "Асинхронное программирование с использованием библиотеки asyncio подходит для событийно-ориентированных приложений.",
    "Эффективное многопоточное программирование требует хорошего понимания синхронизации и безопасности данных.",
    "Многопроцессорное программирование часто используется в задачах параллельной обработки данных, таких как обработка изображений или видео.",
    "Асинхронное программирование удобно в приложениях, где есть много ожидания ввода-вывода.",
    "Важно помнить, что выбор между асинхронностью, многопоточностью и многопроцессорностью зависит от конкретной задачи и требований проекта.",
    "Продолжая обсуждение, в асинхронном программировании можно использовать ключевое слово 'async' для обозначения асинхронных функций.",
    "Асинхронные функции могут вызывать другие асинхронные функции, обеспечивая эффективное управление I/O-операциями.",
    "Многопоточные программы могут использовать ThreadPoolExecutor для создания и управления пулом потоков.",
    "Это упрощает параллельное выполнение задач и позволяет эффективно использовать многоядерные процессоры.",
    "Многопроцессорное программирование может быть более надежным, так как каждый процесс имеет свою собственную память и не влияет на другие процессы.",
    "Однако это требует более сложной организации взаимодействия между процессами.",
    "Асинхронное программирование может быть сложным для отладки из-за асинхронной природы выполнения задач.",
    "Для упрощения отладки можно использовать инструменты, такие как asyncio.run() для запуска асинхронных функций.",
    "В многопоточных программах важно избегать гонок за данными с помощью синхронизации.",
    "Lock, Semaphore и Condition - это некоторые из механизмов синхронизации в Python.",
    "Помимо ThreadPoolExecutor, существует также ProcessPoolExecutor для многопроцессорного программирования.",
    "Обратите внимание, что при многопоточном программировании не все операции могут быть параллельными из-за GIL.",
    "Поэтому для CPU-интенсивных задач лучше использовать многопроцессорное программирование.",
    "Асинхронное программирование часто используется в веб-приложениях для обработки большого количества одновременных запросов.",
    "Синхронные операции в асинхронных функциях можно вызывать с помощью модуля asyncio.to_thread() для избежания блокировки.",
    "Многопоточные программы могут столкнуться с проблемами взаимной блокировки, если не правильно управлять блокирующими операциями.",
    "Многопроцессорное программирование также подходит для обработки данных с использованием множества ядер процессора.",
    "При проектировании многопоточных или многопроцессорных приложений важно учитывать масштабируемость и производительность.",
    "В конечном итоге выбор между асинхронностью, многопоточностью и многопроцессорностью зависит от конкретных задач и требований.",
    "Продолжая обсуждение, в асинхронном программировании можно использовать asyncio.gather() для выполнения нескольких асинхронных задач параллельно.",
    "Это помогает ускорить выполнение кода, если есть несколько независимых задач.",
    "Многопоточное программирование может быть сложным из-за потенциальных проблем с синхронизацией и гонками за ресурсы.",
    "Однако при правильном проектировании и использовании синхронизации можно избежать большинства проблем.",
    "При многопроцессорном программировании каждый процесс имеет свое собственное пространство памяти, что делает его изолированным.",
    "Синхронные функции можно вызывать из асинхронных, но при этом они могут блокировать выполнение асинхронного кода.",
    "Модуль concurrent.futures также предоставляет инструменты для параллельного выполнения функций.",
    "ThreadPoolExecutor и ProcessPoolExecutor предоставляют простой способ создания пулов потоков и процессов.",
    "Важно знать, как выбирать между ThreadPoolExecutor и ProcessPoolExecutor в зависимости от задачи.",
    "Асинхронное программирование удобно в ситуациях, когда требуется высокая отзывчивость приложения.",
    "Многопоточные приложения могут использовать механизмы, такие как Condition и Event, для организации синхронизации.",
    "Помните, что при асинхронном программировании один поток может обрабатывать множество задач благодаря event loop.",
    "Многопроцессорное программирование подходит для решения задач, которые могут быть разбиты на независимые подзадачи.",
    "Модуль concurrent.futures также предоставляет функцию as_completed() для получения результатов задач по мере их завершения.",
    "Многопоточные программы могут сталкиваться с проблемой 'deadlock', когда потоки блокируют друг друга и не могут завершить выполнение.",
    "Избегайте deadlock с помощью правильного управления блокирующими операциями и блокировками.",
    "В асинхронном программировании можно использовать asyncio.Queue для обмена данными между асинхронными задачами.",
    "Многопроцессорное программирование может быть эффективным при обработке данных в параллельных потоках.",
    "Для многопоточных приложений важно использовать thread-safe структуры данных, чтобы избежать гонок за данными.",
    "Когда выбираете между асинхронностью и многопоточностью, учитывайте характер задачи и требования к отзывчивости.",
    "Многопроцессорное программирование может быть более надежным, так как отказ одного процесса не влияет на остальные.",
    "При многопоточном программировании потоки могут совместно использовать память, что требует синхронизации.",
    "Асинхронное программирование обычно используется в сетевых приложениях для обработки большого количества клиентских запросов.",
    "Многопроцессорное программирование позволяет использовать все доступные ядра процессора, что повышает производительность.",
    "При многопоточной разработке важно избегать 'гонок за данными' и конфликтов доступа к общим ресурсам.",
    "Модуль concurrent.futures также предоставляет функцию wait(), которая позволяет ожидать завершения задач.",
    "Асинхронное программирование требует понимания понятия event loop и корутины.",
    "При многопроцессорном программировании каждый процесс может выполняться на отдельном физическом ядре процессора.",
    "Многопоточное программирование может быть более легким для понимания и отладки по сравнению с асинхронным.",
    "Однако асинхронное программирование может обеспечить лучшую производительность в некоторых случаях.",
    "Многопроцессорное программирование может использовать модуль multiprocessing.Queue для обмена данными между процессами.",
    "Асинхронное программирование подходит для приложений, где есть много задач ожидания ввода-вывода.",
    "Для многопоточных приложений важно учитывать, что GIL ограничивает параллельное выполнение внутри одного процесса Python.",
    "Когда речь идет о многопроцессорном программировании, важно рассматривать вопросы безопасности и изоляции данных.",
    "В асинхронных функциях можно использовать try/except блоки для обработки исключений и ошибок.",
    "Многопоточные программы могут использовать потокобезопасные структуры данных, такие как threading.Lock, для предотвращения гонок за данными.",
    "Асинхронное программирование позволяет легко масштабировать приложение для обработки большого количества запросов.",
    "Многопроцессорное программирование требует более аккуратного управления процессами и их взаимодействием.",
    "Для асинхронных задач можно использовать тайм-ауты, чтобы избежать бесконечного ожидания.",
    "Многопоточное программирование может быть особенно полезным при работе с базами данных и файловой системой.",
    "Помните, что многопроцессорное программирование может быть затратным по памяти из-за создания отдельных процессов.",
    "Асинхронные приложения могут использовать библиотеку aiohttp для работы с HTTP-запросами и обработки веб-серверов.",
    "Многопоточные приложения должны быть внимательными к деталям синхронизации, чтобы избежать блокировок и гонок за данными.",
    "При асинхронном программировании рекомендуется использовать async/await синтаксис для более читаемого кода.",
    "Многопроцессорное программирование позволяет использовать мощности многоядерных процессоров для ускорения задач.",
    "Многопоточные приложения могут использовать модуль logging для управления выводом информации из нескольких потоков.",
    "Асинхронные задачи могут быть отменены с помощью asyncio.CancelledError.",
    "Многопроцессорное программирование требует более тщательного планирования и дизайна, чем многопоточное программирование.",
    "При выборе между асинхронностью и многопоточностью учитывайте, что асинхронное программирование может быть более сложным для понимания.",
    "Модуль concurrent.futures также предоставляет функцию Executor.map() для простого распределения задач на выполнение.",
    "Многопоточные приложения могут использовать thread-local storage для изолирования данных в каждом потоке.",
    "Помните, что асинхронные операции могут вызывать 'callback hell', поэтому старайтесь разделять код на маленькие функции.",
    "Многопроцессорное программирование может быть особенно полезным при обработке данных в реальном времени.",
    "Асинхронные приложения могут использовать библиотеку aiomultiprocess для запуска асинхронных задач в отдельных процессах.",
    "Многопоточные приложения могут использовать библиотеку concurrent.futures.ThreadPoolExecutor для управления потоками.",
    "Помните, что в многопоточных программах нужно учитывать особенности операционной системы и планировщика потоков.",
    "Асинхронное программирование может быть особенно полезным в IoT-проектах для управления большим количеством устройств.",
    "Многопроцессорное программирование может использовать механизмы межпроцессного взаимодействия, такие как мьютексы.",
    "При многопоточной разработке важно учитывать, что GIL может снижать эффективность на многоядерных системах.",
    "Асинхронные задачи могут использовать asyncio.Semaphore для ограничения количества одновременно выполняемых задач.",
    "Многопроцессорное программирование может быть сложным для отладки из-за сложности взаимодействия между процессами.",
    "Многопоточные приложения могут использовать механизмы уведомлений, такие как threading.Event, для синхронизации потоков.",
    "Помните, что в асинхронном программировании отсутствует блокировка потоков, что может сэкономить ресурсы.",
    "Многопроцессорное программирование может использовать библиотеку multiprocessing.Manager для обмена данными между процессами.",
    "Асинхронные функции могут быть упакованы в библиотеки и использованы в других проектах для повторного использования.",
    "Многопоточные приложения могут использовать thread-local переменные для изоляции данных в каждом потоке.",
    "Помните, что асинхронное программирование может требовать пересмотра структуры кода и логики приложения.",
    "Многопроцессорное программирование может использовать модуль multiprocessing.Event для организации событийного взаимодействия между процессами.",
    "Асинхронные функции могут использовать asyncio.ensure_future() для запуска задачи в асинхронном режиме.", ]

result = {}

# Функция для подсчета букв в предложении
def count_letters(sentence):
    for char in sentence.lower():
        if char not in string.punctuation and char not in string.whitespace:
            result[char] = result.get(char, 0) + 1


def main():
    # Используйте ThreadPoolExecutor для обработки каждого предложения в отдельном потоке
    with ThreadPoolExecutor() as executor:
        executor.map(count_letters, messages)

    count = dict(sorted(result.items()))
    # Печать словаря
    print(count)

if __name__ == '__main__':
    main()